@page "/Content/TaskPool"
@using TaskWithYou.Shared;

<TaskWithYou.Client.Pages.Content.Tasks._EditTask @ref="EditModal" OnClose="OnRefleshList" />
<TaskWithYou.Client.Pages.Content.Tasks._DeleteTask @ref="DeleteModal" OnClose="OnRefleshList" />

<div class="row">
    <h3 class="col-auto">TaskPool</h3>
    <button type="button" class="btn btn-outline-info col-3"
            @onclick="@(() => JumpToOtherPage("/Content/Tasks/TodayList"))">TodayList</button>
    <button type="button" class="btn btn-outline-primary col-3"
            @onclick="@(() => JumpToOtherPage("/Content/Clusters/List"))">
        ClusterList
    </button>
</div>

@if (CanRender == true)
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>今日のTodo</th>
                <th></th>
                <th>クラスタ</th>
                <th>タスク名</th>
                <th>登録日</th>
                <th>期限日</th>
                <th>詳細</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in TaskTickets)
            {
                <tr>
                    <td>
                        <input type="checkbox" class="form-check" checked="@(task.IsTodayTask)"
                               @oninput="@(() => OnChangeTodayTask(task))"/>                       
                    </td>
                    <td class="text-center @GetColorClass(task.State.State)">
                        <p class="m-0 blight-point">●</p>
                        @task.State.StateName
                    </td>
                    <td class="text-center">
                        @task.Cluster.Name
                    </td>
                    <td>@task.Name</td>
                    <td>@task.TourokuBi</td>
                    <td>@task.KigenBi</td>
                    <td class="text-break">@task.Detail</td>
                    <td>
                        <button type="button" class="btn btn-outline-info"
                                @onclick="@(() => OpenModal(() => EditModal.OnOpenAsync(task.Gid, EditMode.Edit)))">
                            Edit
                        </button>

                        <button type="button" class="btn btn-outline-danger"
                                @onclick="@(() => OpenModal(() => DeleteModal.OnOpenAsync(task.Gid)))" >
                            Del
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

        <button type="button" class="btn btn-outline-info"
                @onclick="@(() => OpenModal(() => EditModal.OnOpenAsync(Guid.Empty, EditMode.Add)))">
            Add
        </button>
    }